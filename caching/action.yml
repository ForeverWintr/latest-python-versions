name: 'Get latest Python versions with caching'
description: 'Implements caching for the latest-python-version action'
inputs:
  min-version:
    description: 'The minimum minor version to include.'
    required: true
  max-version:
    description: 'The maximum minor version to include.'
    required: false
    default: 'latest'
  include-prereleases:
    description: 'Whether to include new minor version of Python that have no official releases.'
    required: false
    default: 'false'
  filename:
    description: 'The name of the file to save python versions in. Can be used to avoid name conflicts'
    required: false
    default: '.python-versions-file'
outputs: {}
runs:
  using: "composite"
  steps:
    # Set cache key based on week number, so cache expires once a week
    - id: set-cache-key
      run: |
        week_number=$(date +%V)
        echo "::set-output name=cache-key::$week_number"

    # Try to load cached versions by week number
    - name: Load cached versions
      uses: actions/cache@v2
      id: cache-versions
      with:
        path: ${{ inputs.filename }}
        key: ${{ steps.set-cache-key.outputs.cache-key }}

    # Fetch new versions if no cache was found
    # TODO: Update to v1 when v1 is released
    - uses: snok/latest-python-versions@v0.1
      if: steps.cache-versions.outputs.cache-hit != 'true'
      id: get-python-versions
      with:
        min-version: ${{ inputs.min-version }}
        max-version: ${{ inputs.min-version }}
        include-prereleases: ${{ inputs.include-prereleases }}

    # Save results to file if no cache was found
    - name: Create new versions file
      run: echo "${{ steps.get-python-versions.outputs.latest-python-versions }}" > ${{ inputs.filename }}
      if: steps.cache-versions.outputs.cache-hit != 'true'

    # Load file contents and export values
    - name: Export versions file values
      id: export-python-versions
      run: |
        versions=$(cat ${{ inputs.filename }})
        echo "::set-output name=python-versions::$versions"
